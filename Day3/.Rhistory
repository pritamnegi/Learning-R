print(rootnode[1])
str(result)
print(rootnode[1])
xmldataframe<- xmlToDataFrame("C:/R-files/Records.xml")
xmldataframe
class(xmldataframe)
record<-xmlParse(file = "C:/R-files/xml_record_file.xml")
record
record<-xmlParse(file = "C:/R-files/xml_record_file.xml")
record
root<-xmlRoot(record)
print(root[1])
("xlsx")
library("xlsx")
install.packages("xlsx")
library("xlsx")
library(readxl)
excel_sheets("C:/R-files/Day2/Criteria2.xlsx")
excel_sheets("C:/R-files/Day2/Criteria 2.xlsx")
year1<- read_excel("C:/R-files/Day2/Criteria 2.xlsx", sheet=1)
year2<- read_excel("C:/R-files/Day2/Criteria 2.xlsx", sheet=2)
year1
year1
year1
year_list<-list(year1,year2)
year_list
library(readxl)
excel_sheets("C:/R-files/Day2/record_shett.xlsx")
file1<- read_excel("C:/R-files/Day2/record_shett.xlsx", sheet=1)
file2<- read_excel("C:/R-files/Day2/record_shett.xlsx", sheet=2)
library(readxl)
excel_sheets("C:/R-files/Day2/record_sheet.xlsx")
file1<- read_excel("C:/R-files/Day2/record_sheet.xlsx", sheet=1)
file2<- read_excel("C:/R-files/Day2/record_sheet.xlsx", sheet=2)
file1
file2
str(file1)
str(file2)
combined_file<-cbind(file1, file2)
combined_file
combined_file<-cbind(file1, file2[-1])
combined_file
combined_file<-cbind(file1, file2[-1,-2])
summary(combined_file)
result.mean<- mean(x)
x= c(12,7,3,4,2,10,2,54,21,8,-5)
result.mean<- mean(x)
result.mean
result.mean<- mean(x, trim=0.3)
result.mean
x= c(12,7,3,4,2,10,2,18,2,54,-21,8,-5)
result.mean<- mean(x)
result.mean
result.mean<- mean(x, trim=0.3)
result.mean
x= c(12,7,3,4,2,18,2,54,-21,8,-5)
result.mean<- mean(x)
result.mean<- mean(x)
result.mean
result.mean<- mean(x, trim=0.3)
result.mean
y= c(12,7,3,4,2,18,2,54,-21,8,-5,NA)
result.mean<- mean(y)
result.mean
y= c(12,7,3,4,2,18,2,54,-21,8,-5,NA)
result.mean<- mean(y, na.rm=TRUE)
result.mean
x= c(12,7,3,4,2,18,2,54,-21,8,-5)
median.result<-median(x)
median.result
x= c(12,7,3,4,2,18,2,54,-21,8,-5,NA)
median.result<-median(x)
median.result
x= c(12,7,3,4,2,18,2,54,-21,8,-5)
median.result<-median(x)
median.result
x= c(12,7,3,4.2,18,2,54,-21,8,-5)
median.result<-median(x)
median.result
?unique
v<-c(2,1,2,3,1,2,3,4,1,5,5,3,2,3)
getmode<- function(v) {
uniqv = unique(v)
uniqv[which.max(tabulate(match(v,uniqv)))]
}
uniqv
getmode
getmode(v)
excel_sheets("C:/R-files/Day2/Assignment Day 2/marks_record.xlsx")
excel_sheets("C:/R-files/Day2/Assignment Day 2/marks_record.xlsx")
year1<- read_excel("C:/R-files/Day2/Assignment Day 2/marks_record.xlsx", sheet=1)
year2<- read_excel("C:/R-files/Day2/Assignment Day 2/marks_record.xlsx", sheet=2)
year3<-read_excel("C:/R-files/Day2/Assignment Day 2/marks_record.xlsx", sheet=3)
year4<- read_excel("C:/R-files/Day2/Assignment Day 2/marks_record.xlsx", sheet=4)
combined_result<-cbind(year1,year2,year3,year4)
combined_result
summary(combined_result)
dim(combined_result)
year_2<- read_excel("C:/R-files/Day2/Assignment Day 2/marks_record.xlsx", sheet=2,range="A1:B7")
year_2
year_2<- read_excel("C:/R-files/Day2/Assignment Day 2/marks_record.xlsx", sheet=2,range="A1:B8")
year_2
year_2<- read_excel("C:/R-files/Day2/Assignment Day 2/marks_record.xlsx", sheet=2,range="A1:B8")
year_2
combined_result<-cbind(year1,year2[-1],year3[-1],year4[-1])
combined_result
summary(combined_result)
combined_result
summary(combined_result)
combined_result<-cbind(year1,year2[-1],year3[-1],year4[-1])
combined_result
m<-mean(mtcars$wt)
m
m1<-median(mtcars$wt)
m1
getmode<- function(v) {
uniqv = unique(v)
uniqv[which.max(tabulate(match(v,uniqv)))]
}
getmode(mtcars$wt)
getmode
getmode
airquality
m2<-mean(airquality$Temp)
m2
m3<-median(airquality$Temp)
m3
m3<-median(airquality$Temp)
m3
getmode<- function(v) {
uniqv = unique(v)
uniqv[which.max(tabulate(match(v,uniqv)))]
}
getmode(airquality$Temp)
pointer<-read.csv("C:/R-files/Assignment Day 2/data_record.csv")
pointer
a<-read.csv("C:/R-files/Assignment Day 2/data_record.csv")
a
a<-read.csv("C:/R-files/Assignment Day 2/data_record.csv")
a
a<-read.csv("C:/R-files/Assignment Day 2/data_record.csv")
a
a<-read.csv("C:/R-files/Assignment Day 2/data_record.csv")
a
a<-read.csv("C:/R-files/Assignment Day 2/record.csv")
a
a<-read.csv("C:/R-files/Day2/Assignment Day 2/record.csv")
a
summary(m)
a<-read.csv("C:/R-files/Day2/Assignment Day 2/record.csv")
a
summary(m)
str(m)
str(a)
a<-read.csv("C:/R-files/Day2/Assignment Day 2/record.csv")
a
summary(a)
str(a)
dim(a)
mean_1<-mean(a$venue_postal_cd_sgmt_1)
mean_1
mean_1<-mean(a$venue_postal_cd_sgmt_1,na.rm=TRUE)
mean_1
mean_1<-mean(trans_face_val_amt, na.rm=TRUE)
mean_1
a<-read.csv("C:/R-files/Day2/Assignment Day 2/record.csv")
a
summary(a)
str(a)
dim(a)
mean_1<-mean(trans_face_val_amt, na.rm=TRUE)
mean_1
mean_1<-mean(a$trans_face_val_amt, na.rm=TRUE)
mean_1
median_1<-median(a$trans_face_val_amt, na.rm=TRUE)
median_1
median_1<-median(a$trans_face_val_amt, na.rm=TRUE)
median_1
getmode(a$trans_face_val_amt)
str(a)
mean_1
new_hope<-c(460.998,314.4)
empire_strikes<-c(290.475, 247.900)
return_jedi<- c(309.306,165.8)
box_office<-c(new_hope,empire_strikes,return_jedi)
box_office
star_wars_matrix<-matrix(box_office, byrow=TRUE, nrow=3)
star_wars_matrix
region<-c("US", "NON-US")
titles<-c("A New Hope", "The Empire Strikes Back", "The Return of Jedi")
rownames(star_wars_matrix)<-title
colnmaes(star_wars_matrix)<-region
star_wars_matrix
region
title
title
title
titles
worldwide_vector<-rowSums(star_wars_matrix)
worldwide_vector
all_wars_matrix<-cbind(star_wars_matrix,worldwide_vector)
all_wars_matrix
rownames(star_wars_matrix)<-title
colnmaes(star_wars_matrix)<-region
rownames(star_wars_matrix)<-title
colnames(star_wars_matrix)<-region
region
titles
rownames(star_wars_matrix)<-title
star_wars_matrix
rownames(star_wars_matrix)<-title
rownames(star_wars_matrix)<-titles
star_wars_matrix
all_wars_matrix<-cbind(star_wars_matrix,worldwide_vector)
all_wars_matrix
The_Pahnatom_Menance<-c(474.5,552.5)
Attack_of_the_Clones<-c(310.7,318.7)
Revenge_of_the_Sith<-c(380.3,468.5)
box_office2<- c(The_Pahnatom_Menance,Attack_of_the_Clones,Revenge_of_the_Sith)
star_wars_matrix2<-matrix(box_office2, byrow=TRUE,nrow=3)
star_wars_matrix2
star_wars_matrix
star_wars_matrix
region2<-c("US", "NON-US")
titles2<-c("The Phantom Menance", "Attack of the Clones","The Revenge of the Sith")
colnames(star_wars_matrix2)<-region2
rownames(star_wars_matrix2)<-titles2
all_wars_matrix
worldwide_vector2<-rowSums(star_wars_matrix2)
worldwide_vector2
all_wars_matrix2<-cbind(star_wars_matrix2,worldwide_vector2)
all_wars_matrix2
all_wars_matrix3<-rbind(all_wars_matrix,all_wars_matrix2)
all_wars_matrix3
install.packages("Rweka")
install.packages(Rweka)
install.packages(Rweka)
install.packages(Rweka)
install.packages("RWeka")
install.packages("cluster")
install.packages("HSAUR")
install.packages("fpc")
head(pottery)
head(pottery)
data(pottery)
data(mtcars)
plot(mtcars)
km2<- kmeans(mtcars,2)
set.seed(123)
km2<- kmeans(mtcars,2)
class(km2)
plotcluster(mtcars,km2$cluster)
summary(km2)
plotcluster(mtcars,km2$cluster)
km2$cluster
plotcluster(mtcars,km2$cluster)
library("RWeka")
library("cluster")
library("HSAUR")
library("fpc")
plotcluster(mtcars,km2$cluster)
set.seed(123)
km4<- kmeans(mtcars,4)
plotcluster(mtcars,km4$cluster)
km2$size
km4$size
km4$iter
set.seed(123)
km8<- kmeans(mtcars,8)
plotcluster(mtcars,km8$cluster)
km8$size
km8$iter
k.ss<-km4$totss
k<-1:8
for(i in k[2:8]) k.ss[i] <- (kmeans(mtcars,centers=i)$tot.withinss)
k.ss
plot(k,k.ss, type="b", xlab="Number of Clusters", ylab="sum of squares")
k.ss<-km4$totss
k<-1:15
for(i in k[2:8]) k.ss[i] <- (kmeans(mtcars,centers=i)$tot.withinss)
k.ss
plot(k,k.ss, type="b", xlab="Number of Clusters", ylab="sum of squares")
k.ss<-km4$totss
k<-1:15
for(i in k[2:15]) k.ss[i] <- (kmeans(mtcars,centers=i)$tot.withinss)
k.ss
plot(k,k.ss, type="b", xlab="Number of Clusters", ylab="sum of squares")
hclust_iris <- hclust(dist(iris))
plot(hclust_iris)
dim(iris)
dim(pottery)
hclust_pottery <- hclust(dist(pottery))
plot(hclust_pottery)
?pottery
?iris
hclust_iris <- hclust(dist(iris[1:40, -5]))
plot(hclust_iris)
dim(iris)
?dist
install.packages("caret")
install.packages("class")
library("caret")
library("class")
library(caret)
library(class)
install.packages("caret")
library(caret)
library(class)
install.packages("class")
library(class)
library(caret)
library(class)
dataurl <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"
download.file(url = dataurl, destfile = "wine.data")
getwd()
setwd("C:/R-files/Day3")
getwd()
wine_df<- raed.csv("C:/R-files/Day3/wine.data", header=FALSE)
wine_df<- read.csv("C:/R-files/Day3/wine.data", header=FALSE)
str(wine_df)
intrain<-createDataPartition(y=wine_df$V1, p=0.7, list = FALSE)
intrain
training<- wine_df[intrain,]
testing<-wine_df[-intrain,]
training
testing
dim(training)
dim(testing)
anyNA(wine_df)
training[["V1"]] = factor(training[["V1"]])
training[["V1"]] = factor(training[["V1"]])
tctrl<- trainControl(method="repeatedcv", number=10, repeats=3)
training[["V1"]] = factor(training[["V1"]])
trctrl<- trainControl(method="repeatedcv", number=10, repeats=3)
knn_fit<- train(V1 ~., data=training, method="knn", trControl=trctrl,preProcess=c("center", "scale"),tuneLength= 10)
knn_fit
plot(knn_fit)
test_pred<- predict(knn_fit, newdata = testing)
test_pred
confusionMatrix(test_pred, testing$V1)
confusionMatrix(test_pred, testing$V1)
str(wine_df)
knn_fit
install.packages("party")
library("partykit")
install.packages("partykit")
library(partykit)
x<-c(20,16,19.79999924,18.39999962,17.10000038,15.5,14.69999981,17.10000038,15.39999962,16.20000076,15,17.20000076,16,17,14.39999962)
y<-c(88.59999847,71.59999847,93.30000305,84.30000305,80.59999847,75.19999695,69.69999695,82,69.40000153,83.30000305,79.59999847,82.59999847,80.59999847,83.5,76.30000305)
plot(x,y)
rel<-lm(y~x)
coefficients(rel)
plot(rel)
plot(rel)
plot(rel$coefficients)
plot(rel)
plot(rel)
head(mtcars)
input <- mtcars[,c("mpg","disp","hp","wt")]
input
plot(rel)
input
model<- lm(mpg~dist+hp+wt, data=input)
model <- lm(mpg~dist+hp+wt, data=input)
model <- lm(mpg~dist+hp+wt, data=input)
model <- lm(mpg~dist+hp+wt,data=input)
input
model <- lm(mpg~dist+hp+wt,data=input)
model <- lm(mpg~dist+hp+wt,data = input)
model <- lm(mpg~disp+hp+wt,data = input)
print(model)
class(model)
a<- coefficients(mode1)[1]
a<- coefficients(model)[1]
a
xdisp<-coefficients(model)[2]
xdisp
xhp<-coefficients(model)
xhp<-coefficients(model)[3]
xwt<-coefficients(model)[4]
Y<- 37.105+(xdisp)*221 + (xhp)*102 + (xwt)*2.91
Y
Y<- a+(xdisp)*221 + (xhp)*102 + (xwt)*2.91
Y
plot(model)
m1<-J48(Species~, data= iris )
m1<-J48(Species~., data= iris )
plot(m1)
summary(m1)
databuy<-read.csv("C:/R-files/Day3/Ass2Data.csv")
databuy
m2<-J48(Age~., data=databuy)
plot(m2)
library(rJava)
library(Fselector)
install.packages("FSelector")
library(Fselector)
library(Fselector)
library(Fselector)
library(Fselector)
library(FSelector)
information.gain(Species~.,data=iris)
subset1.iris<-subset(iris, Petal.width>0.6)
subset1.iris<-subset(iris, Petal.Width>0.6)
m1<-J48(Species~., data= iris )
plot
plot(m1)
information.gain(species~., data=subset1.iris)
information.gain(Species~., data=subset1.iris)
subset2.iris<- subset(subset1.iris, Petal.Width<=1.7)
information.gain(Species~., data=subset2.iris)
install.packages("caTools")
library(caTools)
data<- read.csv("C:/R-files/Day3/input_csv.csv")
spl<- sample.split(data, SplitRatio=0.7)
dataTrain = subset(data, spl=TRUE)
view(dataTrain)
library(caTools)
view(dataTrain)
resultJ48<- J48(as.factor(class)~., dataTrain)
plot((dataTest$class, dataTest.pred))
plot((dataTest$class,dataTest.pred))
plot((dataTest$class~.,dataTest.pred))
plot((dataTest$class,dataTest.pred))
plot((dataTest$class, dataTest.pred))
plot((dataTest$class dataTest.pred))
plot((dataTest$class,dataTest.pred))
plot(dataTest$class,dataTest.pred)
plot(dataTest$class,dataTest.pred)
dataTest =subset(data, spl=FALSE)
resultJ48<- J48(as.factor(class)~., dataTrain)
dataTest.pred<- predict(resultJ48, newdata = dataTest)
plot(dataTest$class,dataTest.pred)
table(dataTest$class,dataTest.pred)
set.seed(1234)
ind<- sample(2, now(iris), replace = TRUE, prob=c(0.7,0.3))
train.data<-iris[ind==1,]
test.data<-iris[ind==2,]
myFormula<-Species ~ Sepal.Length + Sepal.width +Petal.Length + Petal.width
iris_ctree<- ctree(myFormula, data=train.data)
set.seed(1234)
ind<- sample(2, now(iris), replace = TRUE, prob=c(0.7,0.3))
ind<- sample(2, nrow(iris), replace = TRUE, prob=c(0.7,0.3))
train.data<-iris[ind==1,]
test.data<-iris[ind==2,]
myFormula<-Species ~ Sepal.Length + Sepal.width +Petal.Length + Petal.width
iris_ctree<- ctree(myFormula, data=train.data)
myFormula<-Species ~ Sepal.Length + Sepal.Width +Petal.Length + Petal.Width
iris_ctree<- ctree(myFormula, data=train.data)
table(predict(iris_ctree), train.data$Species)
print(iris_ctree)
plot(iris_ctree)
plt(testPred, test.data$Species)
plot(testPred, test.data$Species)
testPred<- predict(iris_ctree, newdata = test.data)
plot(testPred, test.data$Species)
print(testPred)
plot(testPred, test.data$Species)
print(testPred)
plot(testPred, test.data$Species)
install.packaes("VGAM")
install.packages("VGAM")
fit<-vglm(Species~., fsmily=multinomial, data = iris)
fit<-vglm(Species~., family=multinomial, data = iris)
library(VGAM)
fit<-vglm(Species~., family=multinomial, data = iris)
summary(fit)
probabilities<- predict(fit, iris[,1:4], type="response")
probabilities
predictions<- apply(probabilities,1, which.max)
predictions[which(predictions=="1")]<-levels(iris$Species)[1]
predictions[which(predictions=="2")]<-levels(iris$Species)[2]
predictions[which(predictions=="3")]<-levels(iris$Species)[3]
predictions
tsble(predictions, iris$Species)
table(predictions, iris$Species)
head(predictions)
install.packages("pls")
install.packages("klaR")
library(pls)
library(klaR)
x<- iris[,1:4]
y<- iris[,5]
fit<- plsda(x,y,probMethod = "Bayes")
predictions<- predict(fit, iris[,1:4])
table(predictions, iris$Species)
install.packages("RTextTools")
library(RTextTools)
data<- read.csv("C:/R-files/Day3/sunnyData.csv")
dtMatrix<- create_matrix(data["Text"])
tableOTM<- as.table(dtMatrix)
container<- create_conatiner(dtMatrix, data$IsSunny, trsinSize=1:11, virgin=FALSE)
container<- craete_conatiner(dtMatrix, data$IsSunny, trsinSize=1:11, virgin=FALSE)
container<- create_conatiner(dtMatrix, data$IsSunny, trsinSize=1:11, virgin=FALSE)
container<- create_container(dtMatrix, data$IsSunny, trsinSize=1:11, virgin=FALSE)
container<- create_container(dtMatrix, data$IsSunny, trainSize=1:11, virgin=FALSE)
model<- train_model(container, "SVM", kernel = "linear", cost=1)
predictionData<- list("sunny sunny sunny rainy rainy","rainy rainy rainy rainy", "hello", "","this is another rainy world")
predMatrix<- create_matrix(predictionData, originalMatrix = dtMatrix)
predSize = length(predictionData)
trace("create_matrix", edit=T)
predMatrix<- create_matrix(predictionData, originalMatrix = dtMatrix)
predSize = length(predictionData)
predMatrix<- create_matrix(predictionData, originalMatrix = dtMatrix)
predSize = length(predictionData)
predictionContainer<- create_container(predMatrix, labels=rep(0,predSize0),testSize = 1:predSize, virgin=FALSE)
results <- classify_model(predictionContainer, model)
results
predictionContainer<- create_container(predMatrix, labels=rep(0,predSize0),testSize = 1:predSize, virgin=FALSE)
predictionContainer<- create_container(predMatrix, labels=rep(0,predSize),testSize = 1:predSize, virgin=FALSE)
results <- classify_model(predictionContainer, model)
results
